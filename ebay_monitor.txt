// Sheets script
// Configuration variables
const SEARCH_TERMS = [
  "number (n)ine sneaker",
  "undercover scab",
  "vintage"
]; // Add your search terms here
const EMAIL_ADDRESS = "flickowens@icloud.com";  // Replace with your email address
const CHECK_INTERVAL_MINUTES = 1;  // How often to check for new listings

// Create menu item to set up the trigger
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('eBay Monitor')
    .addItem('Start Monitoring', 'setupTrigger')
    .addItem('Add Search Term', 'addSearchTerm')
    .addToUi();
}

// Function to add a new search term via UI
function addSearchTerm() {
  const ui = SpreadsheetApp.getUi();
  const response = ui.prompt(
    'Add New Search Term',
    'Please enter a new search term:',
    ui.ButtonSet.OK_CANCEL
  );

  if (response.getSelectedButton() == ui.Button.OK) {
    const term = response.getResponseText().trim();
    if (term) {
      const configSheet = getOrCreateConfigSheet();
      configSheet.appendRow([term]);
    }
  }
}

// Create or get configuration sheet
function getOrCreateConfigSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let configSheet = ss.getSheetByName('Config');
  
  if (!configSheet) {
    configSheet = ss.insertSheet('Config');
    configSheet.appendRow(['Search Terms']);
    SEARCH_TERMS.forEach(term => configSheet.appendRow([term]));
  }
  
  return configSheet;
}

// Set up time-driven trigger
function setupTrigger() {
  const triggers = ScriptApp.getProjectTriggers();
  triggers.forEach(trigger => ScriptApp.deleteTrigger(trigger));
  
  ScriptApp.newTrigger('checkNewListings')
    .timeBased()
    .everyMinutes(CHECK_INTERVAL_MINUTES)
    .create();
  
  initializeSpreadsheet();
}

// Initialize spreadsheet with headers
function initializeSpreadsheet() {
  const sheet = SpreadsheetApp.getActiveSheet();
  sheet.getRange('A1:F1').setValues([['Search Term', 'Item Title', 'Price', 'URL', 'Listed Date', 'Notification Sent']]);
  sheet.getRange('A1:F1').setFontWeight('bold');
  sheet.setFrozenRows(1);
}

// Get active search terms from config sheet
function getSearchTerms() {
  const configSheet = getOrCreateConfigSheet();
  const terms = configSheet.getRange(2, 1, configSheet.getLastRow() - 1, 1).getValues();
  return terms.flat().filter(term => term); // Remove empty entries
}

// Main function to check for new listings
function checkNewListings() {
  const sheet = SpreadsheetApp.getActiveSheet();
  const existingUrls = sheet.getRange(2, 4, sheet.getLastRow() - 1, 1).getValues().flat();
  const searchTerms = getSearchTerms();
  
  let newItems = [];
  
  searchTerms.forEach(searchTerm => {
    const url = `https://www.ebay.com/sch/i.html?_nkw=${encodeURIComponent(searchTerm)}&_rss=1`;
    let xml;
    
    try {
      xml = UrlFetchApp.fetch(url).getContentText();
    } catch (e) {
      Logger.log(`Error fetching eBay RSS feed for "${searchTerm}": ${e}`);
      return;
    }
    
    const document = XmlService.parse(xml);
    const items = document.getRootElement().getChild('channel').getChildren('item');
    
    items.forEach(item => {
      const title = item.getChild('title').getText();
      const link = item.getChild('link').getText();
      const pubDate = new Date(item.getChild('pubDate').getText());
      const price = extractPrice(title);
      
      if (!existingUrls.includes(link)) {
        newItems.push([searchTerm, title, price, link, pubDate, 'No']);
        sheet.appendRow([searchTerm, title, price, link, pubDate, 'No']);
      }
    });
  });
  
  if (newItems.length > 0) {
    sendNotificationEmail(newItems);
    newItems.forEach((_, index) => {
      sheet.getRange(sheet.getLastRow() - newItems.length + index + 1, 6).setValue('Yes');
    });
  }
}

// Helper function to extract price from title
function extractPrice(title) {
  const priceMatch = title.match(/\$\d+(\.\d{2})?/);
  return priceMatch ? priceMatch[0] : 'N/A';
}

// Send email notification
function sendNotificationEmail(newItems) {
  const subject = `New eBay Items Found`;
  let body = `Found ${newItems.length} new item(s) matching your search terms:\n\n`;
  
  const itemsByTerm = {};
  newItems.forEach(item => {
    if (!itemsByTerm[item[0]]) {
      itemsByTerm[item[0]] = [];
    }
    itemsByTerm[item[0]].push(item);
  });
  
  for (const [searchTerm, items] of Object.entries(itemsByTerm)) {
    body += `\nSearch Term: "${searchTerm}"\n${items.length} new item(s) found:\n`;
    items.forEach(item => {
      body += `\n${item[1]}\nPrice: ${item[2]}\nURL: ${item[3]}\nListed: ${item[4]}\n`;
    });
    body += '\n---\n';
  }
  
  MailApp.sendEmail(EMAIL_ADDRESS, subject, body);
}
